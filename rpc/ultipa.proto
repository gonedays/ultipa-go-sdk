syntax = "proto3";

package ultipa;

// The greeting service definition.
service UltipaRpcs{
  // Sends a greeting
  rpc SayHello (HelloUltipaRequest) returns (HelloUltipaReply) {}
  rpc SearchAB (SearchABRequest) returns (SearchABReply) {}
  rpc SearchKhop (SearchKhopRequest) returns (SearchKhopReply) {}
  rpc CreateIndex (CreateIndexRequest) returns (CreateIndexReply) {}
  rpc Modify (ModifyRequest) returns (ModifyReply) {}
  rpc SearchNodes (SearchNodesRequest) returns (SearchNodesReply) {}
  rpc SearchEdges (SearchEdgesRequest) returns (SearchEdgesReply) {}
  rpc Delete (DeleteRequest) returns (DeleteReply) {}
  rpc GetPropertyInfo (GetPropertyInfoRequest) returns (GetPropertyInfoReply) {}
  rpc CreateProperty (CreatePropertyRequest) returns (CreatePropertyReply) {}
  rpc Insert (InsertRequest) returns (InsertReply) {}
  rpc NodeSpread (NodeSpreadRequest) returns (NodeSpreadReply) {}
  rpc DeleteColumn (DeleteColumnRequest) returns (DeleteColumnReply) {}
  rpc DbInformation (DbInformationRequest) returns (DbInformationReply) {}
  rpc GetIndexColumn (GetIndexColumnRequest) returns (GetIndexColumnReply) {}

  rpc AnalyticLPA (AnalyticLPARequest) returns (AnalyticLPAReply) {}
  rpc AnalyticPR (AnalyticPRRequest) returns (AnalyticPRReply) {}
  rpc AnalyticClusteringCoefficient (AnalyticClusteringCoefficientRequest) returns (AnalyticClusteringCoefficientReply) {}
  rpc AnalyticTriangleCounting (AnalyticTriangleCountingRequest) returns (AnalyticTriangleCountingReply) {}
  rpc AnalyticJaccardSimilarity (AnalyticJaccardSimilarityRequest) returns (AnalyticJaccardSimilarityReply) {}
  rpc AnalyticCosineSimilarity (AnalyticCosineSimilarityRequest) returns (AnalyticCosineSimilarityReply) {}
  rpc AnalyticDegree (AnalyticDegreeRequest) returns (AnalyticDegreeReply) {}
}

/*------------------------1.SayHello------------------------------*/
// The request message containing the user's name.
message HelloUltipaRequest {
  string name = 1;
}

// The response message containing the greetings
message HelloUltipaReply {
  string message = 1;
}
/*--------------------------SayHello----------------------------*/
//p0
/*------------------------2.SearchAB------------------------------*/
message SearchABRequest {
  enum SortType{
    ASC = 0;
    DESC = 1;
  }
  string source = 1;
  string dest = 2;
  int32 depth = 3;
  int32 limit = 4;
  bool pass_super_node = 5;
  Filter node_filter = 6 ;
  Filter edge_filter = 7;
  bool by_short_search = 8;
  bool by_weight_search = 9;
  string weight_column_name = 10;
  bool no_circle = 11;
  repeated string select_columns = 12;
  bool by_sort_search = 13;
  string sort_column_name = 14;
  SortType sort_type = 15;
  string original_source = 16;
  string original_dest = 17;
}

// The response message containing the greetings
message SearchABReply {
  int32 total_time_cost = 1;
  int32 engine_time_cost = 2;
  repeated ABPath paths = 3;
}
message ABPath {
  repeated ABRow nodes = 1;
  repeated ABRow edges = 2;
}
message ABRow {
  repeated ABValues values = 1;
}
//
message ABValues {
  string key = 1;
  string value = 2;
}
/*------------------------SearchAB------------------------------*/

/*------------------------3.SearchKhop------------------------------*/
message SearchKhopRequest {
  string source = 1;
  int32 depth = 2;
  int32 limit = 3;
  Filter node_filter = 4;
  Filter edge_filter = 5;
  repeated string select_columns = 6;
  string original_source = 16;
}

// The response message containing the greetings
message SearchKhopReply {
  int32 total_time_cost = 1;
  int32 engine_time_cost = 2;
  int32 total_number = 3;
  repeated KhopRow nodes = 4;
}

message KhopRow {
  repeated KhopValues values = 1;
}
//
message KhopValues {
  string key = 1;
  string value = 2;
}
/*------------------------SearchKhop------------------------------*/


/*------------------------4.CreateIndex------------------------------*/
message CreateIndexRequest {
  enum DBType{
    DBNODE = 0;
    DBEDGE = 1;
  }
  DBType type = 1;
  string column_name = 2;
}

// The response message containing the greetings
message CreateIndexReply {
  enum STATUS{
    OK = 0;
    NOTFOUND = 1;
    FAILED = 2;
  }
  STATUS status = 1;
  int32 time_cost = 2;
}
/*------------------------CreateIndex------------------------------*/

/*------------------------5.Modify------------------------------*/
message ModifyRequest {
  repeated ModifyNode nodes = 1;
  repeated ModifyEdge edges = 2;
}

message ModifyReply {
  enum STATUS{
    OK = 0;
    FAILED = 1;
  }
  STATUS status = 1;
  int32 time_cost = 2;
}

message ModifyNode {
  string id = 1;
  repeated ModifyValues values = 2;
}
message ModifyEdge {
  string id                 = 1;
  string from_id            = 2;
  string to_id              = 3;
  repeated ModifyValues values  = 4;
}
//
message ModifyValues {
  string key = 1;
  string value = 2;
}
/*------------------------Modify------------------------------*/


//p1
/*------------------------6.SearchNodes------------------------------*/
message SearchNodesRequest {
  string begin_id = 1;
  int32 limit  = 2;
  Filter node_filter = 3;
  repeated string select_columns = 4;
}

message SearchNodesReply {
  int32 time_cost = 1;
  repeated SearchNode nodes = 2;
  int32 total_counts = 3;
}

message SearchNode {
  string _id = 1;
  repeated SearchNodeValues values = 2;
}

message SearchNodeValues {
  string key = 1;
  string value = 2;
}
/*------------------------SearchNodes------------------------------*/

//p1
/*------------------------7.SearchEdges------------------------------*/
message SearchEdgesRequest {
  string begin_id = 1;
  int32 limit  = 2;
  Filter edge_filter = 3;
  repeated string select_columns = 4;
}

message SearchEdgesReply {
  int32 time_cost = 1;
  repeated SearchEdge edges = 2;
  int32 total_counts = 3;
}

message SearchEdge {
  string _id = 1;
  string _from_id            = 2;
  string _to_id              = 3;
  repeated SearchEdgeValues values = 4;
}

message SearchEdgeValues {
  string key = 1;
  string value = 2;
}
/*------------------------SearchEdges------------------------------*/


/*------------------------8.Delete------------------------------*/
message DeleteRequest {
  enum DBType{
    DBNODE = 0;
    DBEDGE = 1;
  }
  DBType type = 1;
  repeated string delete_ids = 2;
}

message DeleteReply {
  enum STATUS{
    OK = 0;
    FAILED = 1;
  }
  STATUS status = 1;
  int32 time_cost = 2;
}

//message DeleteIds {
//  repeated string ids = 1;
//}
/*------------------------Delete------------------------------*/

/*------------------------9.GetPropertyInfo---------------------*/
message GetPropertyInfoRequest {
  enum DBType{
    DBNODE = 0;
    DBEDGE = 1;
  }
  DBType type = 1;
}

message GetPropertyInfoReply {
  repeated GetPropertyInfoValues properties = 1;
}

message GetPropertyInfoValues {

  string column_name = 1;
  UltipaColumnType column_type = 2;
  bool is_index = 3;
}
/*------------------------GetPropertyInfo----------------------*/

/*------------------------10.CreateProperty---------------------*/
message CreatePropertyRequest {
  enum DBType{
    DBNODE = 0;
    DBEDGE = 1;
  }
  DBType type = 1;
  repeated CreatePropertyValues properties = 2;
}

message CreatePropertyReply {
  bool status = 1;
}
message CreatePropertyValues {
//  enum ColumnType{
//    STRING = 0;
//    INT = 1;
//  }
  string column_name = 1;
  UltipaColumnType column_type = 2;
}
/*------------------------CreateProperty----------------------*/

/*------------------------11.Insert------------------------------*/
message InsertRequest {
  repeated InsertNode nodes = 1;
  repeated InsertEdge edges = 2;
}

message InsertReply {
  enum STATUS{
    OK = 0;
    FAILED = 1;
  }
  STATUS status = 1;
  int32 time_cost = 2;
  repeated int32 ids = 3;
}

message InsertNode {
  string id = 1;
  repeated InsertValues values = 2;
}
message InsertEdge {
  string id                 = 1;
  string from_id            = 2;
  string to_id              = 3;
  repeated InsertValues values  = 4;
}
//
message InsertValues {
  string key = 1;
  string value = 2;
}
/*------------------------Insert------------------------------*/

/*------------------------12.NodeSpread------------------------------*/
message NodeSpreadRequest {
  enum SPREAD_TYPE{
    DFS = 0;
    BFS = 1;
  }
  string source = 1;
  int32 depth = 2;
  int32 limit = 3;
  bool pass_super_node = 4;
  SPREAD_TYPE spread_type = 5;
  Filter node_filter = 6;
  Filter edge_filter = 7;
  repeated string select_columns = 8;
}

message NodeSpreadReply {
  int32 total_time_cost = 1;
  int32 engine_time_cost = 2;
  repeated NodeSpreadPath paths = 3;
}
message NodeSpreadPath {
  repeated NodeSpreadRow nodes = 1;
  repeated NodeSpreadRow edges = 2;
}
message NodeSpreadRow {
  repeated NodeSpreadValues values = 1;
}
//
message NodeSpreadValues {
  string key = 1;
  string value = 2;
}

/*------------------------NodeSpread------------------------------*/

/*------------------------13.DeleteColumn--------------------------*/
message DeleteColumnRequest {
  enum DBType{
    DBNODE = 0;
    DBEDGE = 1;
  }
  DBType type = 1;
  string column_name = 2;
}

message DeleteColumnReply {
  enum STATUS{
    OK = 0;
    FAILED = 1;
  }
  STATUS status = 1;
  int32 time_cost = 2;
}
/*------------------------Delete------------------------------*/
/*------------------------14.DbInfomation------------------------------*/
message DbInformationRequest {
}

message DbInformationReply {
  int32 total_nodes = 1;
  int32 total_edges = 2;
  int32 memory      = 3;
  int32 disk        = 4;
  int32 cpu         = 5;
}
/*------------------------DbInfomation------------------------------*/

/*------------------------15.GetIndexColumn------------------------------*/
message GetIndexColumnRequest {
  enum DBType{
    DBNODE = 0;
    DBEDGE = 1;
  }

  DBType db_type = 1;
}

message GetIndexColumnReply {
  repeated string column_names = 1;
}
/*------------------------DbInfomation------------------------------*/

/*------------------------16.AnalyticLPA------------------------------*/
message AnalyticLPARequest {
  int32 loop_num = 1;
  string node_column_name = 2;
}

message AnalyticLPAReply {
//  repeated AnalyticLPAValue values = 1;
  int32 engine_time_cost = 1;
  int32 total_number = 2;
  string result_path = 3;
}

/*------------------------AnalyticLPA------------------------------*/

/*------------------------17.AnalyticPR------------------------------*/
message AnalyticPRRequest {
  int32 loop_num = 1;
  float page_rank_damping = 2;
  int32 page_rank_default = 3;
}

message AnalyticPRReply {
//  repeated AnalyticPRValue column_names = 1;
  int32 engine_time_cost = 1;
  int32 total_number = 2;
  string result_path = 3;
}

/*------------------------AnalyticPR------------------------------*/

/*------------------------18.AnalyticClusteringCoefficient------------------------------*/
//聚类系数(集聚系数)
message AnalyticClusteringCoefficientRequest {

  int32 node_id = 1;

}

message AnalyticClusteringCoefficientReply {

  int32 engine_time_cost = 1;
  double result = 2;

}

/*------------------------AnalyticClusteringCoefficient------------------------------*/

/*------------------------19.AnalyticTriangleCounting------------------------------*/
//三角计算
message AnalyticTriangleCountingRequest {

}

message AnalyticTriangleCountingReply {
  //  repeated AnalyticPRValue column_names = 1;
  int32 engine_time_cost = 1;
  int32 triangle_count = 2;

}
/*------------------------AnalyticTriangleCounting------------------------------*/


/*------------------------20.AnalyticJaccardSimilarity------------------------------*/
//jaccard相似度计算
message AnalyticJaccardSimilarityRequest {

  int32 node_id1 = 1;
  int32 node_id2 = 2;
  //jaccard 如果>0 某一个点的top n最大jaccard值点
  int32 top_n = 3;
}

message AnalyticJaccardSimilarityReply {
  //  repeated AnalyticPRValue column_names = 1;
  int32 engine_time_cost = 1;
  repeated AnalyticJaccardValue Values = 3;
}
message AnalyticJaccardValue {
  //  repeated AnalyticPRValue column_names = 1;
  int32 id = 1;
  float jaccard = 2;
}
/*------------------------AnalyticJaccardSimilarity------------------------------*/

/*------------------------21.AnalyticCosineSimilarity------------------------------*/
//cosine相似度计算
message AnalyticCosineSimilarityRequest {

  int32 node_id1 = 1;
  int32 node_id2 = 2;
  //属性名
  repeated string column_names = 4;
}

message AnalyticCosineSimilarityReply {

  int32 engine_time_cost = 1;
  double cosine = 2;
}
/*------------------------AnalyticCosineSimilarity------------------------------*/

/*------------------------22.AnalyticDegree------------------------------*/
//节点度计算
message AnalyticDegreeRequest {
  enum CalculateType{
    OUT_DEGREE = 0;
    IN_DEGREE = 1;
    CLOSENESS_CENTRALITY_DEGREE = 2; //计算某个节点的紧密中心度
    OUT_CLOSENESS_CENTRALITY_DEGREE = 3;
    IN_CLOSENESS_CENTRALITY_DEGREE = 4;
    DEGREE_CENTRALITY_DEGREE = 5;  //度中心度
    OUT_DEGREE_CENTRALITY_DEGREE = 6;
    IN_DEGREE_CENTRALITY_DEGREE = 7;
    GRAPH_CENTRALITY_DEGREE = 8; //图中心度
  }

  int32 node_id = 1;
  CalculateType calculate_type = 2;
  //度中心度计算,可以选择传入列属性
  string edge_column_name = 3;
}

message AnalyticDegreeReply {

  int32 engine_time_cost = 1;
  double degree = 2;
}
/*------------------------AnalyticCosineSimilarity------------------------------*/



/*------------------------public message-----------------------*/
message Filter {
  enum OPTION{
    FILTER_OPT_AND = 0;
    FILTER_OPT_OR = 1;
  }
  OPTION filter_option = 1;
  repeated FilterValue values = 2;
 }
 message FilterValue {
  string column_name =  1;
  string left_value  =  2;
  string right_value =  3;
}

enum UltipaColumnType{
  COLUMN_INT =  0;
  COLUMN_STRING = 1;
  COLUMN_FLOAT = 2;
  COLUMN_TEXT = 3;
  COLUMN_BOOLEAN = 4;
  COLUMN_UNKNOWN = 5;
}

enum RpcStatus{
  RPC_SUCCESS =  0;
  RPC_FAILED = 1;
  RPC_PARAM_ERROR = 2;
  RPC_BASE_DB_ERROR = 3;
  RPC_ENGINE_ERROR = 4;
  RPC_SYSTEM_ERROR = 5;
}

message RpcResultStatus{
  RpcStatus rpc_status = 1;
  string msg = 2;
}

/*------------------------public message-----------------------*/