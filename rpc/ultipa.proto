syntax = "proto3";

package ultipa;

// The ultipa service definition.
service UltipaRpcs {
    // 1.Sends a greeting
    rpc SayHello (HelloUltipaRequest) returns (HelloUltipaReply) {
    }

    //2.uql
    rpc Uql (UqlRequest) returns (stream UqlReply) {
    }

    //3.用户设置(用于存储用户配置信息,用户自主控制)
    rpc UserSetting (UserSettingRequest) returns (UserSettingReply) {
    }

    //4.下载算法生成文件
    rpc DownloadFile (DownloadFileRequest) returns (stream DownloadFileReply) {
    }

    //5.导出点,边数据
    rpc Export (ExportRequest) returns (stream ExportReply) {
    }

    //6. 获取raft的leader
    rpc GetLeader (GetLeaderRequest) returns (GetLeaderReply) {
    }

    //7.插入点
    rpc InsertNodes (InsertNodesRequest) returns (InsertNodesReply) {
    }

    //8.插入边
    rpc InsertEdges (InsertEdgesRequest) returns (InsertEdgesReply) {
    }

    //9.uql扩展，以下命令在此接口执行执行 top, kill showTask, stopTask,clearTask show() stat listGraph
    // listAlgo getGraph createPolicy, deletePolicy, listPolicy, getPolicy,
    // grant, revoke, listPrivilege, getUser, getSelfInfo, createUser, updateUser, deleteUser, showIndex
    rpc UqlEx (UqlRequest) returns (stream UqlReply) {
    }

}

/*------------------------1.SayHello------------------------------*/
message HelloUltipaRequest {
    string name = 1;
}

message HelloUltipaReply {
    Status status = 1;
    string message = 2;
}
/*--------------------------SayHello----------------------------*/

/*------------------------2.Uql------------------------------*/
/*
*uql : ab.src(1).dest(2).depth(1).limit(10).select(*)
*db_name : default
*timeout  1s 单位:秒
*/
message UqlRequest {
    string uql = 1;
    uint32 timeout = 2;
    string graph_name = 3;
}

message UqlReply {
    Status status = 1;
    int32 total_time_cost = 3;
    int32 engine_time_cost = 4;

    repeated Path paths = 5;
    repeated NodeAlias nodes = 6;
    repeated EdgeAlias edges = 7;
    repeated AttrAlias attrs = 8;
    repeated Table tables = 9;
    repeated Value key_values = 10;
}

message EdgeAlias {
    EdgeTable edge_table = 1;
    string alias = 2;
}

message NodeAlias {
    NodeTable node_table = 1;
    string alias = 2;
}
//key = alias.name, value = ly
message AttrAlias {
    string alias = 1;
    UltipaPropertyType property_type = 2;
    repeated bytes values = 3;
}
/*------------------------2.Uql------------------------------*/


/*------------------------3.UserSetting------------------------------*/
message UserSettingRequest {
    enum OPTION {
        OPT_GET = 0;
        OPT_SET = 1;
    }
    string user_name = 1;
    OPTION opt = 2;
    //key
    string type = 3;
    //value
    string data = 4;
}

message UserSettingReply {
    Status status = 1;
    string data = 2;
}
/*--------------------------UserSetting------------------------------*/

/*------------------------4.Download------------------------------*/
//下载算法生成文件
message DownloadFileRequest {
    string file_path_name = 1;
}

message DownloadFileReply {
    Status status = 1;
    int32 total_size = 2;
    bytes chunk = 3;
}
/*------------------------Download------------------------------*/

/*------------------------5.Export------------------------------*/
//导出数据
//limit <= 0 全量导出
message ExportRequest {
    DBType db_type = 1;
    int32 limit = 2;
    repeated string select_properties = 3;
}

message ExportReply {
    Status status = 1;
    NodeTable node_table = 2;
    EdgeTable edge_table = 3;
}
/*------------------------Export------------------------------*/

/*------------------------6.GetLeader------------------------------*/
message GetLeaderRequest {
}

message GetLeaderReply {
    Status status = 1;
}
/*--------------------------GetLeader----------------------------*/

/*------------------------7.InsertNodes------------------------------*/
message InsertNodesRequest {
    NodeTable node_table = 1;
    //if true return ids
    bool silent = 2;
    bool no_inner_id = 3;
    string graph_name = 4;
    bool check_o = 5;
}

message InsertNodesReply {
    Status status = 1;
    int32 time_cost = 2;
    int32 engine_time_cost = 3;
    repeated int64 ids = 4;
    repeated int32 ignore_indexes = 5;
}
/*------------------------InsertNodes------------------------------*/

/*------------------------8.InsertEdges------------------------------*/
message InsertEdgesRequest {
    EdgeTable edge_table = 1;
    //if true return ids
    bool silent = 2;
    bool no_inner_id = 3;
    string graph_name = 4;
}

message InsertEdgesReply {
    Status status = 1;
    int32 time_cost = 2;
    int32 engine_time_cost = 3;
    repeated int64 ids = 4;
    repeated int32 ignore_indexes = 5;
}
/*------------------------InsertEdges------------------------------*/

/*------------------------public message-----------------------*/

enum UltipaPropertyType {
    PROPERTY_INT32 = 0;
    PROPERTY_STRING = 1;
    PROPERTY_FLOAT = 2;
    PROPERTY_DOUBLE = 3;
    PROPERTY_UINT32 = 4;
    PROPERTY_INT64 = 5;
    PROPERTY_UINT64 = 6;
    PROPERTY_BLOB = 7;
}

enum ErrorCode {
    SUCCESS = 0;
    FAILED = 1;
    PARAM_ERROR = 2;
    BASE_DB_ERROR = 3;
    ENGINE_ERROR = 4;
    SYSTEM_ERROR = 5;
    RAFT_REDIRECT = 6;
    RAFT_LEADER_NOT_YET_ELECTED = 7;
    RAFT_LOG_ERROR = 8;
    UQL_ERROR = 9;
    NOT_RAFT_MODE = 10;
    RAFT_NO_AVAILABLE_FOLLOWERS = 11;
    RAFT_NO_AVAILABLE_ALGO_SERVERS = 12;
    //鉴权失败
    PERMISSION_DENIED = 13;
}

message Status {
    ErrorCode error_code = 1;
    string msg = 2;
    ClusterInfo cluster_info = 3;
}

enum FollowerRole {
    ROLE_UNSET = 0;
    ROLE_READABLE = 1;
    ROLE_ALGO_EXECUTABLE = 2;
    ROLE_LEARNER = 4;
}

message RaftFollower {
    string address = 1;
    int32 role = 2;
    ServerStatus status = 3;
}

enum ServerStatus {
    DEAD = 0;
    ALIVE = 1;
}

message ClusterInfo {
    string redirect = 1;
    string leader_address = 2;
    repeated RaftFollower followers = 3;
}

enum DBType {
    DBNODE = 0;
    DBEDGE = 1;
}

message Path {
    NodeTable node_table = 1;
    EdgeTable edge_table = 2;
}

message Table {
    string table_name = 1;
    repeated string headers = 2;
    repeated TableRow table_rows = 3;
}

message TableRow {
    repeated bytes values = 1;
}

message NodeTable {
    repeated Header headers = 2;
    repeated NodeRow node_rows = 3;
}

message EdgeTable {
    repeated Header headers = 2;
    repeated EdgeRow edge_rows = 3;
}

message NodeRow {
    int64 id = 1;
    repeated bytes values = 2;
}

message EdgeRow {
    int64 id = 1;
    int64 from_id = 2;
    int64 to_id = 3;
    repeated bytes values = 4;
}

message Header {
    string property_name = 1;
    UltipaPropertyType property_type = 2;
}

message Value {
    string key = 1;
    string value = 2;
}

enum TASK_STATUS {
    TASK_PENDING = 0;
    TASK_COMPUTING = 1;
    TASK_WRITING = 2;
    TASK_DONE = 3;
    TASK_FAILED = 4;
    TASK_STOPPED = 5;
}

/*------------------------public message-----------------------*/
