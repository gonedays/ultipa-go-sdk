syntax = "proto3";

package ultipa;

// The ultipa service definition.
service UltipaRpcs {
    // 1.Sends a greeting
    rpc SayHello (HelloUltipaRequest) returns (HelloUltipaReply) {
    }

    //2.uql
    rpc Uql (UqlRequest) returns (stream UqlReply) {
    }

    //3.鲁汶算法(可视化)
    rpc LouvainStream (LouvainStreamRequest) returns (stream LouvainStreamReply) {
    }

    //4.用户设置(用于存储用户配置信息,用户自主控制)
    rpc UserSetting (UserSettingRequest) returns (UserSettingReply) {
    }

    //5.下载算法生成文件
    rpc DownloadFile (DownloadFileRequest) returns (stream DownloadFileReply) {
    }

    //6.导出点,边数据
    rpc Export (ExportRequest) returns (stream ExportReply) {
    }

    //7. 获取raft的leader
    rpc GetLeader (GetLeaderRequest) returns (GetLeaderReply) {
    }

    //8.插入点
    rpc InsertNodes (InsertNodesRequest) returns (InsertNodesReply) {
    }

    //9.插入边
    rpc InsertEdges (InsertEdgesRequest) returns (InsertEdgesReply) {
    }
}

/*------------------------1.SayHello------------------------------*/
message HelloUltipaRequest {
    string name = 1;
}

message HelloUltipaReply {
    Status status = 1;
    string message = 2;
}
/*--------------------------SayHello----------------------------*/

/*------------------------2.Uql------------------------------*/
message UqlRequest {
    string uql = 1;
    string db_name = 2;
}

message UqlReply {
    Status status = 1;
    repeated UqlReplyData uql_data = 2;
}

message UqlReplyData {
    //返回结果序号 分别对应请求的uql顺序号
    int32 sequence_id = 1;

    Status status = 2;
    int32 total_time_cost = 3;
    int32 engine_time_cost = 4;

    repeated Path paths = 5;
    repeated NodeAlias nodes = 6;
    repeated EdgeAlias edges = 7;
    repeated AttrAlias attrs = 8;
    repeated Table tables = 9;
    repeated Value key_values = 10;
}

message EdgeAlias {
    EdgeTable edge_table = 1;
    string alias = 2;
}

message NodeAlias {
    NodeTable node_table = 1;
    string alias = 2;
}
//key = alias.name, value = ly
message AttrAlias {
    string alias = 1;
    UltipaPropertyType property_type = 2;
    repeated bytes values = 3;
}
/*------------------------2.Uql------------------------------*/


/*------------------------3.UserSetting------------------------------*/
message UserSettingRequest {
    enum OPTION {
        OPT_GET = 0;
        OPT_SET = 1;
    }
    string user_name = 1;
    OPTION opt = 2;
    //key
    string type = 3;
    //value
    string data = 4;
}

message UserSettingReply {
    Status status = 1;
    string data = 2;
}
/*--------------------------UserSetting------------------------------*/

/*------------------------4.AnalyticLouvainStream----------------------------*/
//鲁汶算法 计算网络层次结构
message LouvainStreamRequest {
    string edge_property_name = 1;
    double min_modularity_increase = 2;
    int32 phase1_loop = 3;
    int32 community_num = 4;
    int32 node_num = 5;
    int32 edge_num = 6;
}

message LouvainStreamReply {
    enum RET_TYPE {
        NODE = 0;
        EDGE = 1;
    }

    Status status = 1;
    RET_TYPE ret_type = 2;
    repeated LouvainStreamNode node = 3;
    repeated LouvainStreamEdge edge = 4;
    double modularity = 5;
    int32 engine_time_cost = 6;
    int32 total_time_cost = 7;
    int32 total_community_num = 8;
}
message LouvainStreamNode {
    int64 community_id = 1;
    int64 node_id = 2;
}

message LouvainStreamEdge {
    int64 id = 1;
    int64 from_id = 2;
    int64 to_id = 3;
}
/*------------ --------------AnalyticLouvainStream------------------------------*/

/*------------------------5.Download------------------------------*/
//下载算法生成文件
message DownloadFileRequest {
    string file_path_name = 1;
}

message DownloadFileReply {
    Status status = 1;
    int32 total_size = 2;
    bytes chunk = 3;
}
/*------------------------Download------------------------------*/

/*------------------------6.Export------------------------------*/
//导出数据
//limit <= 0 全量导出
message ExportRequest {
    DBType db_type = 1;
    int32 limit = 2;
    repeated string select_properties = 3;
}

message ExportReply {
    Status status = 1;
    NodeTable node_table = 2;
    EdgeTable edge_table = 3;
}
/*------------------------Export------------------------------*/

/*------------------------7.GetLeader------------------------------*/
message GetLeaderRequest {
}

message GetLeaderReply {
    Status status = 1;
}
/*--------------------------GetLeader----------------------------*/

/*------------------------8.InsertNodes------------------------------*/
message InsertNodesRequest {
    NodeTable node_table = 1;
    bool silent = 2;
    string db_name = 3;
}

message InsertNodesReply {
    Status status = 1;
    int32 time_cost = 2;
    repeated int64 ids = 3;
}
/*------------------------InsertNodes------------------------------*/

/*------------------------9.InsertEdges------------------------------*/
message InsertEdgesRequest {
    EdgeTable edge_table = 1;
    //if true return ids
    bool silent = 2;
    string db_name = 3;
}

message InsertEdgesReply {
    Status status = 1;
    int32 time_cost = 2;
    repeated int64 ids = 3;
}
/*------------------------InsertEdges------------------------------*/

/*------------------------public message-----------------------*/

enum UltipaPropertyType {
    PROPERTY_INT32 = 0;
    PROPERTY_STRING = 1;
    PROPERTY_FLOAT = 2;
    PROPERTY_DOUBLE = 3;
    PROPERTY_UINT32 = 4;
    PROPERTY_INT64 = 5;
    PROPERTY_UINT64 = 6;
    PROPERTY_BLOB = 7;
}

enum ErrorCode {
    SUCCESS = 0;
    FAILED = 1;
    PARAM_ERROR = 2;
    BASE_DB_ERROR = 3;
    ENGINE_ERROR = 4;
    SYSTEM_ERROR = 5;
    RAFT_REDIRECT = 6;
    RAFT_LEADER_NOT_YET_ELECTED = 7;
    RAFT_LOG_ERROR = 8;
    UQL_ERROR = 9;
    NOT_RAFT_MODE = 10;
    RAFT_NO_FOLLOWERS = 11;
}

message Status {
    ErrorCode error_code = 1;
    string msg = 2;
    ClusterInfo cluster_info = 3;
}

message ClusterInfo {
    string redirect = 1;
    string raft_peers = 2;
}

enum DBType {
    DBNODE = 0;
    DBEDGE = 1;
}

message Path {
    NodeTable node_table = 1;
    EdgeTable edge_table = 2;
}

message Table {
    string table_name = 1;
    repeated string headers = 2;
    repeated TableRow table_rows = 3;
}

message TableRow {
    repeated bytes values = 1;
}

message NodeTable {
    repeated Header headers = 2;
    repeated NodeRow node_rows = 3;
}

message EdgeTable {
    repeated Header headers = 2;
    repeated EdgeRow edge_rows = 3;
}

message NodeRow {
    int64 id = 1;
    repeated bytes values = 2;
}

message EdgeRow {
    int64 id = 1;
    int64 from_id = 2;
    int64 to_id = 3;
    repeated bytes values = 4;
}

message Header {
    string property_name = 1;
    UltipaPropertyType property_type = 2;
}

message Value {
    string key = 1;
    string value = 2;
}

enum TASK_STATUS {
    TASK_WAITING = 0;
    TASK_COMPUTING = 1;
    TASK_WRITEBACKING = 2;
    TASK_DONE = 3;
    TASK_FAILED = 4;
    TASK_PAUSE = 5;
    TASK_STOP = 6;
}

/*------------------------public message-----------------------*/