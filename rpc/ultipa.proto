syntax = "proto3";

package ultipa;

// The ultipa service definition.
service UltipaRpcs {
    // 1.Sends a greeting
    rpc SayHello (HelloUltipaRequest) returns (HelloUltipaReply) {
    }

    //2.uql
    rpc Uql (UqlRequest) returns (stream UqlReply) {
    }

    //3.获取点或边的属性
    rpc GetPropertyInfo (GetPropertyInfoRequest) returns (GetPropertyInfoReply) {
    }

    //4.数据库信息
    rpc DbInformation (DbInformationRequest) returns (DbInformationReply) {
    }

    //5.鲁汶算法(可视化)
    rpc LouvainStream (LouvainStreamRequest) returns (stream LouvainStreamReply) {
    }

    //6.用户设置(用于存储用户配置信息,用户自主控制)
    rpc UserSetting (UserSettingRequest) returns (UserSettingReply) {
    }

    //7.下载算法生成文件
    rpc DownloadFile (DownloadFileRequest) returns (stream DownloadFileReply) {
    }
    //8.导出点,边数据
    rpc Export (ExportRequest) returns (stream ExportReply) {
    }
    //9. 获取raft的leader
    rpc GetLeader (GetLeaderRequest) returns (GetLeaderReply) {
    }
}

/*------------------------1.SayHello------------------------------*/
message HelloUltipaRequest {
    string name = 1;
}

message HelloUltipaReply {
    Status status = 1;
    string message = 2;
}
/*--------------------------SayHello----------------------------*/

/*------------------------2.Uql------------------------------*/
message UqlRequest {
    string uql = 1;
}

message UqlReply {
    Status status = 1;
    int32 total_time_cost = 2;
    int32 engine_time_cost = 3;
    repeated Path paths = 4;
    repeated NodeAlias nodes = 5;
    repeated EdgeAlias edges = 6;
    repeated AttrAlias attrs = 7;
    repeated Table tables = 8;
    repeated Value values = 9;
}

message EdgeAlias {
    repeated Edge edges = 1;
    string alias = 2;
}

message NodeAlias {
    repeated Node nodes = 1;
    string alias = 2;
}
//key = alias.name, value = ly
message AttrAlias {
    string alias = 1;
    repeated string values = 2;
}

message Table {
    string table_name = 1;
    repeated string headers = 2;
    repeated TableRow table_rows = 3;
}

message TableRow {
    repeated string values = 1;
}
/*------------------------2.Uql------------------------------*/

/*------------------------3.GetPropertyInfo---------------------*/
message GetPropertyInfoRequest {
    DBType type = 1;
}

message GetPropertyInfoReply {
    Status status = 1;
    repeated GetPropertyInfoValues properties = 2;
}

message GetPropertyInfoValues {

    string property_name = 1;
    UltipaPropertyType property_type = 2;
    bool is_lte = 3;
    bool is_index = 4;
}
/*------------------------GetPropertyInfo----------------------*/

/*------------------------4.DbInfomation------------------------------*/
message DbInformationRequest {
}

message DbInformationReply {
    Status status = 1;
    int32 total_nodes = 2;
    int32 total_edges = 3;
    int32 memory = 4;
    int32 disk = 5;
    int32 cpu = 6;
}
/*------------------------DbInfomation------------------------------*/

/*------------------------5.UserSetting------------------------------*/
message UserSettingRequest {
    enum OPTION {
        OPT_GET = 0;
        OPT_SET = 1;
    }
    string user_name = 1;
    OPTION opt = 2;
    string type = 3;
    string data = 4;
}

message UserSettingReply {
    Status status = 1;
    string data = 2;
}
/*--------------------------UserSetting------------------------------*/

/*------------------------6.AnalyticLouvainStream----------------------------*/
//鲁汶算法 计算网络层次结构
message LouvainStreamRequest {
    string edge_property_name = 1;
    double min_modularity_increase = 2;
    int32 phase1_loop = 3;
    int32 community_num = 4;
    int32 node_num = 5;
    int32 edge_num = 6;
}

message LouvainStreamReply {
    enum RET_TYPE {
        NODE = 0;
        EDGE = 1;
    }

    Status status = 1;
    RET_TYPE ret_type = 2;
    repeated LouvainStreamNode node = 3;
    repeated LouvainStreamEdge edge = 4;
    double modularity = 5;
    int32 engine_time_cost = 6;
    int32 total_time_cost = 7;
    int32 total_community_num = 8;
}
message LouvainStreamNode {
    int32 community_id = 1;
    int32 node_id = 2;
}

message LouvainStreamEdge {
    int32 id = 1;
    int32 from_id = 2;
    int32 to_id = 3;
}
/*--------------------------AnalyticLouvainStream------------------------------*/

/*------------------------7.Download------------------------------*/
//下载算法生成文件
message DownloadFileRequest {
    string file_path_name = 1;
}

message DownloadFileReply {
    Status status = 1;
    int32 total_size = 2;
    bytes chunk = 3;
}
/*------------------------Download------------------------------*/

/*------------------------8.Export------------------------------*/
//导出数据
//limit <= 0 全量导出
message ExportRequest {
    DBType db_type = 1;
    int32 limit = 2;
    repeated string select_properties = 3;
}

message ExportReply {
    Status status = 1;
    repeated Node nodes = 2;
    repeated Edge edges = 3;
}
/*------------------------Export------------------------------*/

/*------------------------9.LTE------------------------------*/
message LTERequest {
    string property_name = 1;
    DBType type = 2;
}
message LTEReply {
    Status status = 1;
    int32 time_cost = 2;
}
/*--------------------------LTE------------------------------*/

/*------------------------10.UFE------------------------------*/
message UFERequest {
    string property_name = 1;
    DBType type = 2;
}
message UFEReply {
    Status status = 1;
    int32 time_cost = 2;
}
/*--------------------------UFE------------------------------*/

/*------------------------11.GetLeader------------------------------*/
message GetLeaderRequest {

}

message GetLeaderReply {
    Status status = 1;
}
/*--------------------------SayHello----------------------------*/


/*------------------------public message-----------------------*/

enum UltipaPropertyType {
    PROPERTY_INT32 = 0;
    PROPERTY_STRING = 1;
    PROPERTY_FLOAT = 2;
    PROPERTY_DOUBLE = 3;
    PROPERTY_UINT32 = 4;
    PROPERTY_INT64 = 5;
    PROPERTY_UINT64 = 6;
    PROPERTY_UNKNOWN = 7;
}

enum ErrorCode {
    SUCCESS = 0;
    FAILED = 1;
    PARAM_ERROR = 2;
    BASE_DB_ERROR = 3;
    ENGINE_ERROR = 4;
    SYSTEM_ERROR = 5;
    RAFT_REDIRECT = 6;
    RAFT_LEADER_NOT_YET_ELECTED = 7;
    RAFT_LOG_ERROR = 8;
    UQL_ERROR = 9;
    NOT_RAFT_MODE = 10;
}

message Status {
    ErrorCode error_code = 1;
    string msg = 2;
    ClusterInfo cluster_info = 3;
}

message ClusterInfo {
    string redirect = 1;
    string raft_peers = 2;
}

enum DBType {
    DBNODE = 0;
    DBEDGE = 1;
}

message Path {
    repeated Node nodes = 1;
    repeated Edge edges = 2;
}

message Node {
    string id = 1;
    repeated Value values = 2;
}

message Edge {
    string id = 1;
    string from_id = 2;
    string to_id = 3;
    repeated Value values = 4;
}

message Value {
    string key = 1;
    string value = 2;
}

enum TASK_TYPE {
    TASK_TEST = 0;
    TASK_LOUVAIN = 1;
    TASK_PAGERANK = 2;
    TASK_CC = 3;
    TASK_LPA = 4;
    TASK_KHOP = 5;
    TASK_TRIANGLE_COUNTING = 6;
    TASK_BS_FIND_NODES_BY_NEIGHBOR = 7;
    TASK_BS_FIND_PAIR_BY_NEIGHBOR = 8;
    TASK_NODE2VEC = 9;
    TASK_LINE = 10;
    TASK_RANDOMWALK = 11;
    TASK_NODE2VEC_RANDOMWALK = 12;

    TASK_JACCARD = 13;
    TASK_COSINE_SIMILARITY = 14;
    TASK_CLUSTERING_COEFFICIENT = 15;
    TASK_RANDOM_WALK = 16;
    TASK_RANDOM_WALK_NODE2VEC = 17;
    TASK_EMBEDDING = 18;

    TASK_KNN = 19;
    TASK_K_CORE = 20;
    TASK_SYBIL_RANK = 21;
    TASK_CONNECTED_COMPONENT = 22;
    TASK_MST = 23;
    TASK_HANP = 24;
    TASK_K_MEANS = 25;
    TASK_SYBILRANK = 26;

    TASK_CLOSENESS_CENTRALITY = 27;
    TASK_IN_CLOSENESS_CENTRALITY = 28;
    TASK_OUT_CLOSENESS_CENTRALITY = 29;
    TASK_DEGREE_CENTRALITY = 30;
    TASK_IN_DEGREE_CENTRALITY = 31;
    TASK_OUT_DEGREE_CENTRALITY = 32;
    TASK_GRAPH_CENTRALITY = 33;
}

enum TASK_STATUS {
    TASK_WAITTING = 0;
    TASK_COMPUTING = 1;
    TASK_WRITEBACKING = 2;
    TASK_DONE = 3;
    TASK_FAILED = 4;
    TASK_UNKNOWN = 5;
}

/*------------------------public message-----------------------*/